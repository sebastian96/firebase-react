{"version":3,"sources":["components/LinkForm.jsx","firebase.js","components/Links.jsx","App.js","serviceWorker.js","index.js"],"names":["LinkForm","props","initialStateValues","url","name","description","useState","values","setValues","handleInputChange","e","target","value","useEffect","currentId","length","links","find","link","id","className","onSubmit","preventDefault","addOrEditWebsite","type","placeholder","onChange","rows","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Link","setLinks","setCurrentId","linkObject","a","collection","doc","set","swal","update","onSnapshot","res","docs","forEach","push","data","map","key","onClick","title","text","icon","buttons","dangerMode","then","willDelete","delete","href","App","Links","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c6fa66a.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nconst LinkForm = props => {\r\n\r\n    const initialStateValues = {\r\n        url: '', \r\n        name: '', \r\n        description: ''\r\n    }\r\n\r\n    const [values, setValues] = useState(initialStateValues);\r\n\r\n    const handleInputChange = e => {\r\n        const {name, value} = e.target;\r\n        setValues({...values, [name]: value});\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.addOrEditWebsite(values);\r\n        setValues({...initialStateValues});\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(props.currentId.length === 0) {\r\n            setValues({...initialStateValues});\r\n        } else {\r\n            setValues(props.links.find(link => link.id === props.currentId));\r\n        }\r\n    }, [props.currentId])\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col col-md-12 p-4\">\r\n                <h2>{props.currentId === '' ? 'Add link' : 'Update link'}</h2>\r\n                <form className=\"card card-body\" onSubmit={handleSubmit}>\r\n                    <div className=\"form-group input-group\">\r\n                        <div className=\"input-group-text bg-light\">\r\n                            <i className=\"material-icons\">insert_link</i>\r\n                        </div>\r\n                        <input \r\n                            className=\"form-control\" \r\n                            type=\"text\" \r\n                            placeholder=\"https://someurl.com\" \r\n                            name=\"url\"\r\n                            onChange={handleInputChange}\r\n                            value={values.url}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group input-group\">\r\n                        <div className=\"input-group-text bg-light\">\r\n                            <i className=\"material-icons\">create</i>\r\n                        </div>\r\n                        <input \r\n                            className=\"form-control\"\r\n                            placeholder=\"website name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            onChange={handleInputChange}\r\n                            value={values.name}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <textarea \r\n                            className=\"form-control\" \r\n                            name=\"description\" \r\n                            rows=\"3\" \r\n                            placeholder=\"website description\" \r\n                            onChange={handleInputChange}\r\n                            value={values.description}\r\n                        ></textarea>\r\n                    </div>\r\n                    <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                        {props.currentId === '' ? 'Save' : 'Update'}\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LinkForm;","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBHqumuxHybyGLhjw3RsC3Cnfgf16uyb-g\",\r\n    authDomain: \"fb-crud-react-b126e.firebaseapp.com\",\r\n    databaseURL: \"https://fb-crud-react-b126e.firebaseio.com\",\r\n    projectId: \"fb-crud-react-b126e\",\r\n    storageBucket: \"fb-crud-react-b126e.appspot.com\",\r\n    messagingSenderId: \"275079861723\",\r\n    appId: \"1:275079861723:web:1d6f224cf7691a951c03fe\"\r\n};\r\n\r\nconst fb = firebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = fb.firestore();\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport LinkForm from './LinkForm';\r\nimport {db} from '../firebase';\r\nimport swal from 'sweetalert';\r\n\r\nconst Link = () => {\r\n\r\n    const [links, setLinks] = useState([]);\r\n    const [currentId, setCurrentId] = useState('');\r\n\r\n    const addOrEditWebsite = async (linkObject) => {\r\n        if(currentId === '') {\r\n            await db.collection('links').doc().set(linkObject);\r\n            swal(\"Good job!\", \"You saved the link!\", \"success\");\r\n        } else {\r\n            await db.collection('links').doc(currentId).update(linkObject);\r\n            swal(\"Good job!\", \"You updated the link!\", \"success\");\r\n            setCurrentId([])\r\n        }\r\n    };\r\n\r\n    const getLinks = () => {\r\n        db.collection('links').onSnapshot(res => {\r\n            const docs = [];\r\n            res.forEach(link => {\r\n                docs.push({...link.data(), id: link.id});\r\n            })\r\n            setLinks(docs);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getLinks();\r\n    }, []);\r\n\r\n    const handleDeleteLink = id => {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"Once deleted, you will not be able to recover this link!\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n            if (willDelete) {\r\n                db.collection('links').doc(id).delete();\r\n                swal(\"Poof! Your link has been deleted!\", {\r\n                    icon: \"success\",\r\n                });\r\n            } else {\r\n                swal(\"Your link is safe!\");\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <LinkForm {...{addOrEditWebsite, currentId, links}} />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <h2>saved websites</h2>\r\n                    <div className=\"d-flex flex-wrap justify-content-center\">\r\n                        {links.map((link) => (\r\n                            <div className=\"card m-1\" key={link.id}>\r\n                                <div className=\"card-body\">    \r\n                                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                                        <h3 className=\"mr-5\">{link.name}</h3>\r\n                                        <div className=\"ml-5\">\r\n                                            <button className=\"btn btn-warning mr-2\" onClick={() => setCurrentId(link.id)}>\r\n                                                <i className=\"material-icons\">create</i>\r\n                                            </button>\r\n                                            <button className=\"btn btn-danger\" onClick={() => handleDeleteLink(link.id)}>\r\n                                                <i className=\"material-icons\">close</i>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <p className=\"mt-1\">{link.description}</p>\r\n                                    <a className=\"btn btn-primary\" href={link.url} target=\"_blank\">Go to {link.name}</a>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Link;","import React from 'react';\nimport Links from './components/Links';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Links />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './firebase';\nimport 'bootswatch/dist/sketchy/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}